import React from 'react';
import {AppLayout} from '../components/Base/AppLayout';
import {Alert, StyleSheet, View} from 'react-native';
import {Colors} from '../utils/styles';
import {BackButton} from '../components/Base/BackButton';
import {Typography} from '../components/Base/Typography';
import {ButtonWrapper} from '../components/Button/ButtonWrapper';
import {SView} from '../components/Base/SView';
import {CustomButton} from '../components/Button/CustomButton';
import {CustomCheckbox} from '../components/Base/CustomCheckbox';
import useStorage from '../hooks/useStorage';
import {useTranslation} from 'react-i18next';
import i18next from 'i18next';

export const ChooseLanguage = () => {
  const {t} = useTranslation();
  const [language, setLanguage] = useStorage('language', 'uk');

  const handleChangeLanguage = (
    value: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' | '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞' | '–†–æ—Å—ñ–π—Å—å–∫–∞',
  ) => {
    setLanguage(value === '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞' ? 'en' : 'uk');
  };

  return (
    <AppLayout>
      <View style={styles.wrapper}>
        <BackButton />
        <Typography
          variant="h3"
          textAlign="center"
          marginTop={20}
          marginBottom={20}>
          {t('profile.language')}
        </Typography>
        <ButtonWrapper onPress={() => handleChangeLanguage('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞')}>
          <View style={styles.linkWrapper}>
            <Typography variant="p2SemiBold">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</Typography>
            <CustomCheckbox
              onPress={() => handleChangeLanguage('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞')}
              value={language === 'uk' ? true : false}
            />
          </View>
        </ButtonWrapper>
        <ButtonWrapper onPress={() => handleChangeLanguage('–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞')}>
          <View style={styles.linkWrapper}>
            <Typography variant="p2SemiBold">–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞</Typography>
            <CustomCheckbox
              onPress={() => handleChangeLanguage('–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞')}
              value={language === 'en' ? true : false}
            />
          </View>
        </ButtonWrapper>
        <ButtonWrapper
          onPress={() => {
            handleChangeLanguage('–†–æ—Å—ñ–π—Å—å–∫–∞');
            Alert.alert(
              '–¢–≤—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∑—ñ—Ä–≤–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥ –±–æ —Ç–∏ –∑—Ä–æ–±–∏–≤ —Ö—É–π–æ–≤–∏–π –≤–∏–±—ñ—Ä –∑–∞—Å—É–Ω—å –π–æ–≥–æ –≤ —Ä–æ—Ç–∞ –∞–±–æ –≤ –∞–Ω–∞–ª—å–Ω–∏–π –æ—Ç–≤—ñ—Ä –¥–ª—è —è—Å–∫—Ä–∞–≤—ñ—à–æ–≥–æ –µ—Ñ—Ñ–µ–∫—Ç—É',
            );
          }}>
          <View style={styles.linkWrapper}>
            <Typography variant="p2SemiBold">–†–æ—Å—ñ–π—Å—å–∫–∞ ü§°</Typography>
            <CustomCheckbox
              onPress={() => handleChangeLanguage('–†–æ—Å—ñ–π—Å—å–∫–∞')}
              value={false}
            />
          </View>
        </ButtonWrapper>
      </View>
      <SView marginLeft={20} marginRight={20}>
        <CustomButton
          onPress={() => i18next.changeLanguage(language)}
          text={t('base.update')}
          background={Colors.PRIMARY}
        />
      </SView>
    </AppLayout>
  );
};

const styles = StyleSheet.create({
  wrapper: {
    paddingHorizontal: 20,
    flex: 1,
  },
  linkWrapper: {
    borderWidth: 1,
    borderColor: Colors.PRIMARY,
    padding: 13,
    borderRadius: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
});
